// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.0
// - protoc             v3.20.1
// source: v1/interface.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationInterfaceData = "/api.interface.v1.Interface/Data"

type InterfaceHTTPServer interface {
	Data(context.Context, *DataRequest) (*DataResponse, error)
}

func RegisterInterfaceHTTPServer(s *http.Server, srv InterfaceHTTPServer) {
	r := s.Route("/")
	r.GET("/application/v1/getApp", _Interface_Data0_HTTP_Handler(srv))
}

func _Interface_Data0_HTTP_Handler(srv InterfaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationInterfaceData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Data(ctx, req.(*DataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DataResponse)
		return ctx.Result(200, reply)
	}
}

type InterfaceHTTPClient interface {
	Data(ctx context.Context, req *DataRequest, opts ...http.CallOption) (rsp *DataResponse, err error)
}

type InterfaceHTTPClientImpl struct {
	cc *http.Client
}

func NewInterfaceHTTPClient(client *http.Client) InterfaceHTTPClient {
	return &InterfaceHTTPClientImpl{client}
}

func (c *InterfaceHTTPClientImpl) Data(ctx context.Context, in *DataRequest, opts ...http.CallOption) (*DataResponse, error) {
	var out DataResponse
	pattern := "/application/v1/getApp"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationInterfaceData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
