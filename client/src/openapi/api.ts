/* tslint:disable */
/* eslint-disable */
/**
 * TopHubService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FeedData
 */
export interface FeedData {
    /**
     * 
     * @type {Array<Top>}
     * @memberof FeedData
     */
    'list'?: Array<Top>;
}
/**
 * 
 * @export
 * @interface FeedRequest
 */
export interface FeedRequest {
    /**
     * 
     * @type {string}
     * @memberof FeedRequest
     */
    'site'?: string;
}
/**
 * 
 * @export
 * @interface FeedResponse
 */
export interface FeedResponse {
    /**
     * 
     * @type {number}
     * @memberof FeedResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof FeedResponse
     */
    'message'?: string;
    /**
     * 
     * @type {FeedData}
     * @memberof FeedResponse
     */
    'data'?: FeedData;
}
/**
 * Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    [key: string]: any;

    /**
     * The type of the serialized message.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    '@type'?: string;
}
/**
 * The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
 * @export
 * @interface Status
 */
export interface Status {
    /**
     * The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
     * @type {number}
     * @memberof Status
     */
    'code'?: number;
    /**
     * A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
     * @type {string}
     * @memberof Status
     */
    'message'?: string;
    /**
     * A list of messages that carry the error details.  There is a common set of message types for APIs to use.
     * @type {Array<GoogleProtobufAny>}
     * @memberof Status
     */
    'details'?: Array<GoogleProtobufAny>;
}
/**
 * 
 * @export
 * @interface Top
 */
export interface Top {
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'spiderTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'site'?: string;
    /**
     * 
     * @type {number}
     * @memberof Top
     */
    'rank'?: number;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof Top
     */
    'extra'?: string;
}

/**
 * TopHubServiceApi - axios parameter creator
 * @export
 */
export const TopHubServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FeedRequest} feedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topHubServiceFeed: async (feedRequest: FeedRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'feedRequest' is not null or undefined
            assertParamExists('topHubServiceFeed', 'feedRequest', feedRequest)
            const localVarPath = `/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(feedRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topHubServicePing: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopHubServiceApi - functional programming interface
 * @export
 */
export const TopHubServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TopHubServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FeedRequest} feedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topHubServiceFeed(feedRequest: FeedRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.topHubServiceFeed(feedRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async topHubServicePing(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.topHubServicePing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TopHubServiceApi - factory interface
 * @export
 */
export const TopHubServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TopHubServiceApiFp(configuration)
    return {
        /**
         * 
         * @param {FeedRequest} feedRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topHubServiceFeed(feedRequest: FeedRequest, options?: any): AxiosPromise<FeedResponse> {
            return localVarFp.topHubServiceFeed(feedRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topHubServicePing(options?: any): AxiosPromise<string> {
            return localVarFp.topHubServicePing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TopHubServiceApi - object-oriented interface
 * @export
 * @class TopHubServiceApi
 * @extends {BaseAPI}
 */
export class TopHubServiceApi extends BaseAPI {
    /**
     * 
     * @param {FeedRequest} feedRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopHubServiceApi
     */
    public topHubServiceFeed(feedRequest: FeedRequest, options?: AxiosRequestConfig) {
        return TopHubServiceApiFp(this.configuration).topHubServiceFeed(feedRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopHubServiceApi
     */
    public topHubServicePing(options?: AxiosRequestConfig) {
        return TopHubServiceApiFp(this.configuration).topHubServicePing(options).then((request) => request(this.axios, this.basePath));
    }
}



