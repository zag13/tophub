// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/zag13/tophub/server/dal/model"
)

func newTophubFeed(db *gorm.DB, opts ...gen.DOOption) tophubFeed {
	_tophubFeed := tophubFeed{}

	_tophubFeed.tophubFeedDo.UseDB(db, opts...)
	_tophubFeed.tophubFeedDo.UseModel(&model.TophubFeed{})

	tableName := _tophubFeed.tophubFeedDo.TableName()
	_tophubFeed.ALL = field.NewAsterisk(tableName)
	_tophubFeed.ID = field.NewInt64(tableName, "id")

	_tophubFeed.fillFieldMap()

	return _tophubFeed
}

type tophubFeed struct {
	tophubFeedDo

	ALL field.Asterisk
	ID  field.Int64

	fieldMap map[string]field.Expr
}

func (t tophubFeed) Table(newTableName string) *tophubFeed {
	t.tophubFeedDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tophubFeed) As(alias string) *tophubFeed {
	t.tophubFeedDo.DO = *(t.tophubFeedDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tophubFeed) updateTableName(table string) *tophubFeed {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")

	t.fillFieldMap()

	return t
}

func (t *tophubFeed) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tophubFeed) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 1)
	t.fieldMap["id"] = t.ID
}

func (t tophubFeed) clone(db *gorm.DB) tophubFeed {
	t.tophubFeedDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tophubFeed) replaceDB(db *gorm.DB) tophubFeed {
	t.tophubFeedDo.ReplaceDB(db)
	return t
}

type tophubFeedDo struct{ gen.DO }

type ITophubFeedDo interface {
	gen.SubQuery
	Debug() ITophubFeedDo
	WithContext(ctx context.Context) ITophubFeedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITophubFeedDo
	WriteDB() ITophubFeedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITophubFeedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITophubFeedDo
	Not(conds ...gen.Condition) ITophubFeedDo
	Or(conds ...gen.Condition) ITophubFeedDo
	Select(conds ...field.Expr) ITophubFeedDo
	Where(conds ...gen.Condition) ITophubFeedDo
	Order(conds ...field.Expr) ITophubFeedDo
	Distinct(cols ...field.Expr) ITophubFeedDo
	Omit(cols ...field.Expr) ITophubFeedDo
	Join(table schema.Tabler, on ...field.Expr) ITophubFeedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITophubFeedDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITophubFeedDo
	Group(cols ...field.Expr) ITophubFeedDo
	Having(conds ...gen.Condition) ITophubFeedDo
	Limit(limit int) ITophubFeedDo
	Offset(offset int) ITophubFeedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITophubFeedDo
	Unscoped() ITophubFeedDo
	Create(values ...*model.TophubFeed) error
	CreateInBatches(values []*model.TophubFeed, batchSize int) error
	Save(values ...*model.TophubFeed) error
	First() (*model.TophubFeed, error)
	Take() (*model.TophubFeed, error)
	Last() (*model.TophubFeed, error)
	Find() ([]*model.TophubFeed, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TophubFeed, err error)
	FindInBatches(result *[]*model.TophubFeed, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.TophubFeed) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITophubFeedDo
	Assign(attrs ...field.AssignExpr) ITophubFeedDo
	Joins(fields ...field.RelationField) ITophubFeedDo
	Preload(fields ...field.RelationField) ITophubFeedDo
	FirstOrInit() (*model.TophubFeed, error)
	FirstOrCreate() (*model.TophubFeed, error)
	FindByPage(offset int, limit int) (result []*model.TophubFeed, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITophubFeedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t tophubFeedDo) Debug() ITophubFeedDo {
	return t.withDO(t.DO.Debug())
}

func (t tophubFeedDo) WithContext(ctx context.Context) ITophubFeedDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tophubFeedDo) ReadDB() ITophubFeedDo {
	return t.Clauses(dbresolver.Read)
}

func (t tophubFeedDo) WriteDB() ITophubFeedDo {
	return t.Clauses(dbresolver.Write)
}

func (t tophubFeedDo) Session(config *gorm.Session) ITophubFeedDo {
	return t.withDO(t.DO.Session(config))
}

func (t tophubFeedDo) Clauses(conds ...clause.Expression) ITophubFeedDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tophubFeedDo) Returning(value interface{}, columns ...string) ITophubFeedDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tophubFeedDo) Not(conds ...gen.Condition) ITophubFeedDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tophubFeedDo) Or(conds ...gen.Condition) ITophubFeedDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tophubFeedDo) Select(conds ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tophubFeedDo) Where(conds ...gen.Condition) ITophubFeedDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tophubFeedDo) Order(conds ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tophubFeedDo) Distinct(cols ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tophubFeedDo) Omit(cols ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tophubFeedDo) Join(table schema.Tabler, on ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tophubFeedDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tophubFeedDo) RightJoin(table schema.Tabler, on ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tophubFeedDo) Group(cols ...field.Expr) ITophubFeedDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tophubFeedDo) Having(conds ...gen.Condition) ITophubFeedDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tophubFeedDo) Limit(limit int) ITophubFeedDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tophubFeedDo) Offset(offset int) ITophubFeedDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tophubFeedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITophubFeedDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tophubFeedDo) Unscoped() ITophubFeedDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tophubFeedDo) Create(values ...*model.TophubFeed) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tophubFeedDo) CreateInBatches(values []*model.TophubFeed, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tophubFeedDo) Save(values ...*model.TophubFeed) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tophubFeedDo) First() (*model.TophubFeed, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TophubFeed), nil
	}
}

func (t tophubFeedDo) Take() (*model.TophubFeed, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TophubFeed), nil
	}
}

func (t tophubFeedDo) Last() (*model.TophubFeed, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TophubFeed), nil
	}
}

func (t tophubFeedDo) Find() ([]*model.TophubFeed, error) {
	result, err := t.DO.Find()
	return result.([]*model.TophubFeed), err
}

func (t tophubFeedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TophubFeed, err error) {
	buf := make([]*model.TophubFeed, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tophubFeedDo) FindInBatches(result *[]*model.TophubFeed, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tophubFeedDo) Attrs(attrs ...field.AssignExpr) ITophubFeedDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tophubFeedDo) Assign(attrs ...field.AssignExpr) ITophubFeedDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tophubFeedDo) Joins(fields ...field.RelationField) ITophubFeedDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tophubFeedDo) Preload(fields ...field.RelationField) ITophubFeedDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tophubFeedDo) FirstOrInit() (*model.TophubFeed, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TophubFeed), nil
	}
}

func (t tophubFeedDo) FirstOrCreate() (*model.TophubFeed, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TophubFeed), nil
	}
}

func (t tophubFeedDo) FindByPage(offset int, limit int) (result []*model.TophubFeed, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tophubFeedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tophubFeedDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tophubFeedDo) Delete(models ...*model.TophubFeed) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tophubFeedDo) withDO(do gen.Dao) *tophubFeedDo {
	t.DO = *do.(*gen.DO)
	return t
}
